#include <stdio.h>
#include <limits.h>
double findMedianSortedArrays(int* nums1, int m, int* nums2, int n) {
    if (m > n){
        return findMedianSortedArrays(nums2, n, nums1, m);}
    int imin = 0, imax = m, half_len = (m + n + 1) / 2;
    while (imin <= imax) {
        int i = (imin + imax) / 2;
        int j = half_len - i;
        if (i < m && nums1[i] < nums2[j - 1]) {
            imin = i + 1;
        } else if (i > 0 && nums1[i - 1] > nums2[j]) {
            imax = i - 1;}
             else {
            int max_of_left;
            if (i == 0) {
                max_of_left = nums2[j - 1];}
                else if (j == 0) {
                max_of_left = nums1[i - 1];}
                else {
                max_of_left = (nums1[i - 1] > nums2[j - 1]) ? nums1[i - 1] : nums2[j - 1];}
            if ((m + n) % 2 == 1) {
                return max_of_left;}
            int min_of_right;
            if (i == m) {
                min_of_right = nums2[j];}
                else if (j == n) {
                min_of_right = nums1[i];}
                else {
                min_of_right = (nums1[i] < nums2[j]) ? nums1[i] : nums2[j];}
            return (max_of_left + min_of_right) / 2.0;}}
    return 0.0;}
int main() {
    int nums1[] = {1, 3};
    int nums2[] = {2};
    int m = sizeof(nums1) / sizeof(nums1[0]);
    int n = sizeof(nums2) / sizeof(nums2[0]);
    double result = findMedianSortedArrays(nums1, m, nums2, n);
    printf("The median is: %f\n", result);
    return 0;}
