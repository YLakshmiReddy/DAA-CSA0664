#include <stdio.h>
#include <stdlib.h>
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;};
struct TreeNode* createNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}
int findMax(int* nums, int start, int end) {
    int maxIdx = start;
    for (int i = start + 1; i <= end; i++) {
        if (nums[i] > nums[maxIdx]) {
            maxIdx = i;}    }
    return maxIdx;}
struct TreeNode* constructMaximumBinaryTree(int* nums, int start, int end) {
    if (start > end) {
        return NULL;}
    int maxIdx = findMax(nums, start, end);
    struct TreeNode* root = createNode(nums[maxIdx]);
    root->left = constructMaximumBinaryTree(nums, start, maxIdx - 1);
    root->right = constructMaximumBinaryTree(nums, maxIdx + 1, end);
    return root;}
void inorderTraversal(struct TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->val);
        inorderTraversal(root->right);}}
int main() {
    int nums[] = {3, 2, 1, 6, 0, 5};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    struct TreeNode* root = constructMaximumBinaryTree(nums, 0, numsSize - 1);
    printf("In-order traversal of the constructed Maximum Binary Tree:\n");
    inorderTraversal(root);
    printf("\n");
    return 0;
}
